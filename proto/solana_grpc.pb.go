// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: proto/solana.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SolanaService_GetLatestBlockHash_FullMethodName  = "/proto.SolanaService/GetLatestBlockHash"
	SolanaService_GetAccountBalance_FullMethodName   = "/proto.SolanaService/GetAccountBalance"
	SolanaService_GetSlotLeader_FullMethodName       = "/proto.SolanaService/GetSlotLeader"
	SolanaService_GetSlotLeaderStream_FullMethodName = "/proto.SolanaService/GetSlotLeaderStream"
)

// SolanaServiceClient is the client API for SolanaService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Solana Service gRPC interface
type SolanaServiceClient interface {
	GetLatestBlockHash(ctx context.Context, in *GetLatestBlockHashRequest, opts ...grpc.CallOption) (*GetLatestBlockHashResponse, error)
	GetAccountBalance(ctx context.Context, in *GetAccountBalanceRequest, opts ...grpc.CallOption) (*GetAccountBalanceResponse, error)
	GetSlotLeader(ctx context.Context, in *GetSlotLeaderRequest, opts ...grpc.CallOption) (*GetSlotLeaderResponse, error)
	GetSlotLeaderStream(ctx context.Context, in *GetSlotLeaderRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GetSlotLeaderResponse], error)
}

type solanaServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSolanaServiceClient(cc grpc.ClientConnInterface) SolanaServiceClient {
	return &solanaServiceClient{cc}
}

func (c *solanaServiceClient) GetLatestBlockHash(ctx context.Context, in *GetLatestBlockHashRequest, opts ...grpc.CallOption) (*GetLatestBlockHashResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetLatestBlockHashResponse)
	err := c.cc.Invoke(ctx, SolanaService_GetLatestBlockHash_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *solanaServiceClient) GetAccountBalance(ctx context.Context, in *GetAccountBalanceRequest, opts ...grpc.CallOption) (*GetAccountBalanceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAccountBalanceResponse)
	err := c.cc.Invoke(ctx, SolanaService_GetAccountBalance_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *solanaServiceClient) GetSlotLeader(ctx context.Context, in *GetSlotLeaderRequest, opts ...grpc.CallOption) (*GetSlotLeaderResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSlotLeaderResponse)
	err := c.cc.Invoke(ctx, SolanaService_GetSlotLeader_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *solanaServiceClient) GetSlotLeaderStream(ctx context.Context, in *GetSlotLeaderRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GetSlotLeaderResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &SolanaService_ServiceDesc.Streams[0], SolanaService_GetSlotLeaderStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GetSlotLeaderRequest, GetSlotLeaderResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SolanaService_GetSlotLeaderStreamClient = grpc.ServerStreamingClient[GetSlotLeaderResponse]

// SolanaServiceServer is the server API for SolanaService service.
// All implementations must embed UnimplementedSolanaServiceServer
// for forward compatibility.
//
// Solana Service gRPC interface
type SolanaServiceServer interface {
	GetLatestBlockHash(context.Context, *GetLatestBlockHashRequest) (*GetLatestBlockHashResponse, error)
	GetAccountBalance(context.Context, *GetAccountBalanceRequest) (*GetAccountBalanceResponse, error)
	GetSlotLeader(context.Context, *GetSlotLeaderRequest) (*GetSlotLeaderResponse, error)
	GetSlotLeaderStream(*GetSlotLeaderRequest, grpc.ServerStreamingServer[GetSlotLeaderResponse]) error
	mustEmbedUnimplementedSolanaServiceServer()
}

// UnimplementedSolanaServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSolanaServiceServer struct{}

func (UnimplementedSolanaServiceServer) GetLatestBlockHash(context.Context, *GetLatestBlockHashRequest) (*GetLatestBlockHashResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLatestBlockHash not implemented")
}
func (UnimplementedSolanaServiceServer) GetAccountBalance(context.Context, *GetAccountBalanceRequest) (*GetAccountBalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccountBalance not implemented")
}
func (UnimplementedSolanaServiceServer) GetSlotLeader(context.Context, *GetSlotLeaderRequest) (*GetSlotLeaderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSlotLeader not implemented")
}
func (UnimplementedSolanaServiceServer) GetSlotLeaderStream(*GetSlotLeaderRequest, grpc.ServerStreamingServer[GetSlotLeaderResponse]) error {
	return status.Errorf(codes.Unimplemented, "method GetSlotLeaderStream not implemented")
}
func (UnimplementedSolanaServiceServer) mustEmbedUnimplementedSolanaServiceServer() {}
func (UnimplementedSolanaServiceServer) testEmbeddedByValue()                       {}

// UnsafeSolanaServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SolanaServiceServer will
// result in compilation errors.
type UnsafeSolanaServiceServer interface {
	mustEmbedUnimplementedSolanaServiceServer()
}

func RegisterSolanaServiceServer(s grpc.ServiceRegistrar, srv SolanaServiceServer) {
	// If the following call pancis, it indicates UnimplementedSolanaServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SolanaService_ServiceDesc, srv)
}

func _SolanaService_GetLatestBlockHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLatestBlockHashRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SolanaServiceServer).GetLatestBlockHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SolanaService_GetLatestBlockHash_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SolanaServiceServer).GetLatestBlockHash(ctx, req.(*GetLatestBlockHashRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SolanaService_GetAccountBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccountBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SolanaServiceServer).GetAccountBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SolanaService_GetAccountBalance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SolanaServiceServer).GetAccountBalance(ctx, req.(*GetAccountBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SolanaService_GetSlotLeader_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSlotLeaderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SolanaServiceServer).GetSlotLeader(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SolanaService_GetSlotLeader_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SolanaServiceServer).GetSlotLeader(ctx, req.(*GetSlotLeaderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SolanaService_GetSlotLeaderStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetSlotLeaderRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SolanaServiceServer).GetSlotLeaderStream(m, &grpc.GenericServerStream[GetSlotLeaderRequest, GetSlotLeaderResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SolanaService_GetSlotLeaderStreamServer = grpc.ServerStreamingServer[GetSlotLeaderResponse]

// SolanaService_ServiceDesc is the grpc.ServiceDesc for SolanaService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SolanaService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.SolanaService",
	HandlerType: (*SolanaServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetLatestBlockHash",
			Handler:    _SolanaService_GetLatestBlockHash_Handler,
		},
		{
			MethodName: "GetAccountBalance",
			Handler:    _SolanaService_GetAccountBalance_Handler,
		},
		{
			MethodName: "GetSlotLeader",
			Handler:    _SolanaService_GetSlotLeader_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetSlotLeaderStream",
			Handler:       _SolanaService_GetSlotLeaderStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/solana.proto",
}
